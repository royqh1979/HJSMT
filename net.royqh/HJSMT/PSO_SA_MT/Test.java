package HJSMT.PSO_SA_MT;

import java.util.concurrent.ExecutionException;

public class Test {

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        // TODO Auto-generated method stub

        String problem = "ft20";
        /**
         *  fix[i,j] 即第i,j号工序需要的机器编号（机器编号从1开始）
         */
        String[][] worktable = new String[][]{
                {"8;10;14;16", "4;6;14;18", "24", "5", "1;18;21;25"},
                {"5;17", "9", "15;17", "6;7;9;10;11", "5;6;14"},
                {"8;23", "1;11;20;25", "7;14", "4;13;14;16", "2;3;4;16"},
                {"11;13", "1;7;15;16", "9;21;23", "22", "19;20"},
                {"3;8;11;13", "8", "8", "21", "2;3;22"},
                {"15;16", "4", "1;10;16;22", "23", "1;2"},
                {"3;9;13;21", "3;12;13;19;22", "2;23;25", "7;10;16;17;20", "1;3;8"},
                {"9", "13;14", "6;22", "18", "4;11;19;23;25"},
                {"11;24", "21", "3;4;6;14", "14", "2;3"},
                {"2;9;10;19;25", "4;11", "18", "19", "15;16;18"},
                {"7;17;20;24;25", "6;14;16;18;20", "11", "16", "5;12;25"},
                {"4;13;21;22;25", "3;19", "1;2;12;13;21", "5;14", "10;11;12;21;23"},
                {"6;18", "1;2;7;14;16", "1;3;12;18;19", "19", "16"},
                {"6;7;15;23", "4;18", "11", "5;13;15;20;23", "6;24"},
                {"5;7;9;18", "14;15;25", "13;14", "3;7;11;24", "4;6;20;21"},
                {"3;10", "13;21;24", "2;9;11;12;22", "2;5;8;11;23", "14;16"},
                {"12;16;20;24;25", "5;16;20;23;25", "3;12;19", "2;9;17;18", "11;22;24"},
                {"7;11;12;20;23", "8;11;16;21", "14", "23;24", "2"},
                {"13;15;16;17;22", "1;7;16", "8;9;11;12;16", "17", "8"},
                {"22", "3;5;18;19;20", "8", "19;21", "2;8;10;16;25"}
        };
        /**
         * p(i,j)，即第i,j号工序所需的工期（duration)
         */
        int[][] timetable = new int[][]{
                {50, 15, 10, 79, 34},
                {38, 38, 12, 51, 24},
                {10, 24, 36, 38, 35},
                {88, 79, 93, 54, 90},
                {62, 55, 86, 33, 59},
                {73, 69, 92, 82, 78},
                {4, 71, 13, 62, 54},
                {46, 82, 77, 64, 4},
                {53, 68, 15, 37, 41},
                {85, 61, 3, 26, 76},
                {42, 27, 22, 62, 99},
                {91, 52, 72, 90, 86},
                {21, 3, 12, 21, 61},
                {96, 50, 93, 78, 57},
                {81, 78, 11, 25, 24},
                {53, 69, 2, 31, 8},
                {34, 96, 40, 5, 19},
                {63, 88, 13, 64, 38},
                {77, 35, 14, 79, 30},
                {77, 30, 51, 80, 15}
        };
        /**
         * 机器数量（注意其在worktable中从1开始编号）
         */
        int maxmachine = 25;

        /**
         * 种群数量
         */
        int PopSize = 40;
        /**
         * 迭代次数
         */
        int num_iteration = 100;

        int m = worktable.length;
        int n = worktable[0].length;

        int test = 10000;
        int best_time =0;
        int[] best_result=null;
        for (int i=0;i<test;i++) {
            PSO pso = new PSO(worktable, timetable, maxmachine, PopSize, problem, num_iteration);
            pso.Initialization();
            int[] result = pso.run();
            int result_time = result[m*n];
            if ((best_time == 0) || (best_time>result_time)) {
                best_time=result_time;
                best_result = result;
            }
            System.out.println("test."+i+" time:"+result_time+" best time: "+best_time);
        }

        for (int i = 0; i < best_result.length; i++) {
            System.out.print(best_result[i] + ", ");
        }

    }

}
